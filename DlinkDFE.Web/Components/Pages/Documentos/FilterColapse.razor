@inherits DocumentoListBase

<MudStack Row="true">
    <MudItem xs="12" md="6" Class="d-flex gap-10 justify-space-between align-center">

        <MudContainer>
            <MudSelect T="string"
                Placeholder="Status"
                Variant="Variant.Outlined"
                AnchorOrigin="Origin.BottomCenter" 
                TransformOrigin="Origin.TopCenter"
                MultiSelection="true"
                SelectedValues="@_selectedStatuses"
                MultiSelectionTextFunc="@(selectedItems => selectedItems.Count == 0 ? "Status" : $"{selectedItems.Count} selecionado(s)")"
                CloseMenuOnItemClick="false"
                Class="mt-0">
                @foreach (var status in _statusOptions)
                {
                    <MudSelectItem T="string" Value="@status">@status</MudSelectItem>
                }
            </MudSelect>
        </MudContainer>
        
        <MudContainer>
            <MudSelect T="string"
                Placeholder="Modelo"
                Variant="Variant.Outlined"
                Class="mt-0"
                MultiSelection="true"
                AnchorOrigin="Origin.BottomCenter" 
                TransformOrigin="Origin.TopCenter"
                SelectedValues="@_selectedModels">
                @foreach (var model in _modelOptions)
                {
                    <MudSelectItem T="string" Value="@model">@model</MudSelectItem>
                }
            </MudSelect>
        </MudContainer>

        <MudContainer>
            <MudStack>
                <MudMenu 
                    Label="Número"
                    ActivationEvent="MouseEvent.LeftClick"
                    AnchorOrigin="Origin.BottomCenter" 
                    TransformOrigin="Origin.TopCenter"
                    Variant="Variant.Outlined">

                    <MudContainer Class="pa-4">
                        <MudNumericField HideSpinButtons="true" 
                            @bind-Value="IntValue" 
                            Label="Número inicial" 
                            Variant="Variant.Text" 
                            Min="0" 
                            Max="50" />
                        <MudNumericField HideSpinButtons="true" 
                            @bind-Value="IntValue" 
                            Label="Número final" 
                            Variant="Variant.Text" 
                            Min="0" 
                            Max="50" />
                    </MudContainer>
                </MudMenu>
            </MudStack>
        </MudContainer>

        
        <MudContainer >
            <MudItem Class="d-inline-flex">
                <MudRadioGroup @bind-Value="SelectedValue">
                <MudRadio Color="Color.Primary" Value="@("1")">Emissão</MudRadio>
                <MudRadio Color="Color.Primary" Value="@("2")">Autorização</MudRadio>

                </MudRadioGroup>
                <div class="d-flex align-center">
                    <MudButton Variant="Variant.Outlined" OnClick="Reset">Limpar Filtros</MudButton>
                    <MudText Class="ml-4">Filtros Selecionados</MudText>
                </div>
            </MudItem>
                <MudDatePicker Label="Data Inicial" @bind-Date="_date" ShowToolbar="false" />
                <MudDatePicker Label="Data Final" @bind-Date="_date" ShowToolbar="false" />

            <MudItem>

            </MudItem>
        </MudContainer>

    </MudItem>
</MudStack>

@code {

    private DateTime? _date = DateTime.Today;

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public EventCallback OnExpandCollapseClick { get; set; }

    [Parameter]
    public HashSet<string> _selectedStatuses { get; set; } = new HashSet<string>();

    [Parameter]
    public IEnumerable<string> _statusOptions { get; set; } = new List<string>();

    [Parameter]
    public HashSet<string> _selectedModels { get; set; } = new HashSet<string>();

    [Parameter]
    public IEnumerable<string> _modelOptions { get; set; } = new List<string>();

    [Parameter]
    public int IntValue { get; set; }

    [Parameter]
    public EventCallback ApplyFilters { get; set; }

    public string SelectedValue { get; set; }

    public void Reset()
    {
        SelectedValue = null;
    }
}
